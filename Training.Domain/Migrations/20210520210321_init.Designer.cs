// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Training.Domain.Entities;

namespace Training.Domain.Migrations
{
    [DbContext(typeof(TrainingDbContext))]
    [Migration("20210520210321_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Training.Domain.Entities.ApprovedCourses", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Attended")
                        .HasColumnType("bit");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCertificateAvailableForDownload")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCertificateUpdated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCourseEvaluated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdateOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PayOffStatus")
                        .HasColumnType("int");

                    b.Property<bool>("ReTookExam")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("TraineeId")
                        .HasColumnType("bigint");

                    b.Property<double?>("TraineeScore")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("RequestId")
                        .IsUnique()
                        .HasFilter("[RequestId] IS NOT NULL");

                    b.HasIndex("TraineeId");

                    b.ToTable("ApprovedCourses");
                });

            modelBuilder.Entity("Training.Domain.Entities.AspNetRoles", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Training.Domain.Entities.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Training.Domain.Entities.AspNetUserLogins", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Training.Domain.Entities.AspNetUserRoles", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Training.Domain.Entities.AspNetUsers", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("AcceptPolicy")
                        .HasColumnType("bit");

                    b.Property<bool?>("AcceptedUser")
                        .HasColumnType("bit");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BirthDateHijri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ChangePassword")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("EmailSent")
                        .HasColumnType("bit");

                    b.Property<string>("Employer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("JobDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("LockoutEndDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<long?>("NationalityId")
                        .HasColumnType("bigint");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SSNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SubscribeMailList")
                        .HasColumnType("bit");

                    b.Property<string>("ThirdName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkPlace")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NationalityId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Training.Domain.Entities.Attendance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Attend")
                        .HasColumnType("bit");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("TraineeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TraineeId");

                    b.ToTable("Attendance");
                });

            modelBuilder.Entity("Training.Domain.Entities.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Training.Domain.Entities.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CourseStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("CourseTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Fees")
                        .HasColumnType("float");

                    b.Property<bool>("GiveAttendanceList")
                        .HasColumnType("bit");

                    b.Property<bool>("HasCourseCertificate")
                        .HasColumnType("bit");

                    b.Property<double?>("HighestScore")
                        .HasColumnType("float");

                    b.Property<bool?>("IsEvaluationEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExtraCourse")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReTakeFree")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MiminumAttendance")
                        .HasColumnType("int");

                    b.Property<double?>("MinimumSuccessScore")
                        .HasColumnType("float");

                    b.Property<string>("MoreInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberAvailableSeats")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfDays")
                        .HasColumnType("int");

                    b.Property<int?>("NumberWaitingSeats")
                        .HasColumnType("int");

                    b.Property<double?>("ReTakeFees")
                        .HasColumnType("float");

                    b.Property<Guid?>("RowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrainerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("numberAvailableSeatsRetest")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CourseStatusId");

                    b.HasIndex("CourseTypeId");

                    b.HasIndex("Name");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("Training.Domain.Entities.CourseAttachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.ToTable("CourseAttachment");
                });

            modelBuilder.Entity("Training.Domain.Entities.CourseDates", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CourseDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseDates");
                });

            modelBuilder.Entity("Training.Domain.Entities.CourseExtraSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ApprovalLetter")
                        .HasColumnType("bit");

                    b.Property<bool>("BuildingNumber")
                        .HasColumnType("bit");

                    b.Property<bool>("CanChangeDate")
                        .HasColumnType("bit");

                    b.Property<bool>("CanChangeTestDate")
                        .HasColumnType("bit");

                    b.Property<bool>("CanLeaveAndMoneyBack")
                        .HasColumnType("bit");

                    b.Property<bool>("CanRedoTest")
                        .HasColumnType("bit");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<bool>("ExtraCode")
                        .HasColumnType("bit");

                    b.Property<bool>("FillEnergyForm")
                        .HasColumnType("bit");

                    b.Property<bool>("FillExcelForProfessionalCourse")
                        .HasColumnType("bit");

                    b.Property<bool>("FillRegForm")
                        .HasColumnType("bit");

                    b.Property<bool>("FillWordForProfessionalCourse")
                        .HasColumnType("bit");

                    b.Property<bool>("JobDescription")
                        .HasColumnType("bit");

                    b.Property<bool>("PostalCode")
                        .HasColumnType("bit");

                    b.Property<bool>("SaudiPostalCode")
                        .HasColumnType("bit");

                    b.Property<bool>("SchoolCertificate")
                        .HasColumnType("bit");

                    b.Property<bool>("StreetNumber")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.ToTable("CourseExtraSetting");
                });

            modelBuilder.Entity("Training.Domain.Entities.CourseStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatusAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CourseStatus");
                });

            modelBuilder.Entity("Training.Domain.Entities.CourseTermAndConditions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<int>("CourseType")
                        .HasColumnType("int");

                    b.Property<string>("TermsAndConditionsAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TermsAndConditionsEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId")
                        .IsUnique()
                        .HasFilter("[CourseId] IS NOT NULL");

                    b.ToTable("CourseTermAndConditions");
                });

            modelBuilder.Entity("Training.Domain.Entities.CourseTypes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GeneralAdvices")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneralAdvicesEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneralInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneralInfoEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneralQuestions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneralQuestionsEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TermsandConditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TermsandConditionsEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CourseTypes");
                });

            modelBuilder.Entity("Training.Domain.Entities.Exemptionletter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LetterContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TraineeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TraineeId")
                        .IsUnique();

                    b.ToTable("Exemptionletter");
                });

            modelBuilder.Entity("Training.Domain.Entities.FAQ", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<string>("QuestionAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("FAQ");
                });

            modelBuilder.Entity("Training.Domain.Entities.Governmental", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("AllowTrainee")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Contacted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExcludedResons")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneralNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Responsible")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TargetingStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Governmental");
                });

            modelBuilder.Entity("Training.Domain.Entities.InActiveReason", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("InActiveReason");
                });

            modelBuilder.Entity("Training.Domain.Entities.LKPCity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("LKPCity");
                });

            modelBuilder.Entity("Training.Domain.Entities.LKPNationality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("LKPNationality");
                });

            modelBuilder.Entity("Training.Domain.Entities.LKPProTypeInfo", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GeneralAdvices")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneralAdvicesEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneralInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneralInfoEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneralQuestions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneralQuestionsEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("TermsandConditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TermsandConditionsEN")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Name");

                    b.ToTable("LKPProTypeInfo");
                });

            modelBuilder.Entity("Training.Domain.Entities.LkpRequestStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LkpRequestStatus");
                });

            modelBuilder.Entity("Training.Domain.Entities.LkpRequestType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LkpRequestType");
                });

            modelBuilder.Entity("Training.Domain.Entities.MainRequsetWithRelatedRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ApprovedCourseId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("MainRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RelatedRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedCourseId");

                    b.HasIndex("MainRequestId");

                    b.HasIndex("RelatedRequestId");

                    b.ToTable("MainRequsetWithRelatedRequest");
                });

            modelBuilder.Entity("Training.Domain.Entities.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AllResponseFromGateWay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Fees")
                        .HasColumnType("float");

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentCompany")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("PaymentStatus")
                        .HasColumnType("bit");

                    b.Property<string>("ReferenceFromGateWay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ThisYearInv")
                        .HasColumnType("int");

                    b.Property<bool>("UpdatedByFinance")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Training.Domain.Entities.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Price")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Training.Domain.Entities.RequestDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BuildingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SaudiPostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolCertificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TitleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WorkPlaceId")
                        .HasColumnType("bigint");

                    b.Property<string>("WorkPlaceText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkplaceType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.HasIndex("WorkPlaceId");

                    b.ToTable("RequestDetails");
                });

            modelBuilder.Entity("Training.Domain.Entities.RequestMaster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApprovalLetter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AspNetUsersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CountChangeCourse")
                        .HasColumnType("int");

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnergySaveingForm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FillExcelForProfessionalCourse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FillWordForProfessionalCourse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("ReTookCourse")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RequestStatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RequestStatusIdForTrainee")
                        .HasColumnType("bigint");

                    b.Property<long>("RequestTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("TraineeId")
                        .HasColumnType("bigint");

                    b.Property<int>("WizerdStep")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AspNetUsersId");

                    b.HasIndex("CourseId");

                    b.HasIndex("RequestStatusId");

                    b.HasIndex("RequestStatusIdForTrainee");

                    b.HasIndex("RequestTypeId");

                    b.HasIndex("TraineeId");

                    b.ToTable("RequestMaster");
                });

            modelBuilder.Entity("Training.Domain.Entities.RequestRecruitEmailSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Key")
                        .HasColumnType("int");

                    b.Property<int>("SendCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RequestRecruitEmailSetting");
                });

            modelBuilder.Entity("Training.Domain.Entities.RequestRecruitEmailsCounts", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<long>("RelatedToSetting")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SendingCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("RelatedToSetting");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestRecruitEmailsCounts");
                });

            modelBuilder.Entity("Training.Domain.Entities.RequestTaskUsers", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssignedToUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RequestTaskId")
                        .HasColumnType("bigint");

                    b.Property<long>("TaskStatusId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("RequestTaskId");

                    b.HasIndex("TaskStatusId");

                    b.ToTable("RequestTaskUsers");
                });

            modelBuilder.Entity("Training.Domain.Entities.RequestTasks", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EmailSent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelatedRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TaskCreateDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("TaskStatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserTakeAction")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RelatedRoleId");

                    b.HasIndex("RequestId");

                    b.HasIndex("TaskStatusId");

                    b.HasIndex("UserTakeAction");

                    b.ToTable("RequestTasks");
                });

            modelBuilder.Entity("Training.Domain.Entities.Titles", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TitleAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Titles");
                });

            modelBuilder.Entity("Training.Domain.Entities.Trainee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BuildingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SaudiPostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolCertificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TitleId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("WorkPlaceId")
                        .HasColumnType("bigint");

                    b.Property<string>("WorkPlaceText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkplaceType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TitleId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkPlaceId");

                    b.ToTable("Trainee");
                });

            modelBuilder.Entity("Training.Domain.Entities.TraineeProFormExtraData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CPE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ED1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ED2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ED3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ED4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EDD1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EDD2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EDD3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EDD4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EDF1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EDF2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EDF3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EDF4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EDFrom1")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("EDFrom2")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("EDFrom3")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("EDFrom4")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("EDG1")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("EDG2")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("EDG3")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("EDG4")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("EDTo1")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("EDTo2")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("EDTo3")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("EDTo4")
                        .HasColumnType("Date");

                    b.Property<string>("EIT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EXFrom1")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("EXFrom2")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("EXFrom3")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("EXFrom4")
                        .HasColumnType("Date");

                    b.Property<string>("EXNA1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EXNA2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EXNA3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EXNA4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EXP1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EXP2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EXP3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EXP4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EXT1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EXT2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EXT3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EXT4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EXTo1")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("EXTo2")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("EXTo3")
                        .HasColumnType("Date");

                    b.Property<DateTime?>("EXTo4")
                        .HasColumnType("Date");

                    b.Property<string>("ExplainAnyRegistrationRevoke")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HRS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IhaveSeminar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PC1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PC2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PC3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PC4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PC5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PD1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PD2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PD3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PD4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PD5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PR1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PR2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PR3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PR4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PR5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RCA1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RCA2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RCP1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RCP2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RN1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RN2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegArch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeminarDL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("proformid")
                        .HasColumnType("bigint");

                    b.Property<string>("pyn1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pyn2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pyn3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pyn4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pyn5")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("proformid")
                        .IsUnique();

                    b.ToTable("TraineeProFormExtraData");
                });

            modelBuilder.Entity("Training.Domain.Entities.TranieeEnergyForm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullEnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SSNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScietificDegree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecializedIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("YearsOfExperience")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("RequestId")
                        .IsUnique()
                        .HasFilter("[RequestId] IS NOT NULL");

                    b.ToTable("TranieeEnergyForm");
                });

            modelBuilder.Entity("Training.Domain.Entities.TranieeProCourseForm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CollegeUnivAttendedandNumberofYears")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyFax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyPostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyStreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Companyemailaddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryOfResidence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployerPreef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GivenName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomePostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeStateProvince")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeStreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameOfCertificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PositionTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredContactOfficeorHome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProctorUEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RTEF")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TypeofDegreereceivedFieldofDegree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YearDegreeReceived")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("YearsofExperience")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("RequestId")
                        .IsUnique()
                        .HasFilter("[RequestId] IS NOT NULL");

                    b.ToTable("TranieeProCourseForm");
                });

            modelBuilder.Entity("Training.Domain.Entities.UserCourseRevisionTypes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCourseRevisionTypes");
                });

            modelBuilder.Entity("Training.Domain.Entities.WaitingListPriority", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("RequestId");

                    b.ToTable("WaitingListPriority");
                });

            modelBuilder.Entity("Training.Domain.Entities.ApprovedCourses", b =>
                {
                    b.HasOne("Training.Domain.Entities.Course", "Course")
                        .WithMany("ApprovedTrainees")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Training.Domain.Entities.RequestMaster", "Request")
                        .WithOne("ApprovedCourse")
                        .HasForeignKey("Training.Domain.Entities.ApprovedCourses", "RequestId");

                    b.HasOne("Training.Domain.Entities.Trainee", "Trainee")
                        .WithMany("ApprovedCourses")
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Training.Domain.Entities.AspNetUserClaims", b =>
                {
                    b.HasOne("Training.Domain.Entities.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Training.Domain.Entities.AspNetUserLogins", b =>
                {
                    b.HasOne("Training.Domain.Entities.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Training.Domain.Entities.AspNetUserRoles", b =>
                {
                    b.HasOne("Training.Domain.Entities.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId");

                    b.HasOne("Training.Domain.Entities.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Training.Domain.Entities.AspNetUsers", b =>
                {
                    b.HasOne("Training.Domain.Entities.LKPNationality", "LKPNationality")
                        .WithMany()
                        .HasForeignKey("NationalityId");
                });

            modelBuilder.Entity("Training.Domain.Entities.Attendance", b =>
                {
                    b.HasOne("Training.Domain.Entities.Course", "Course")
                        .WithMany("Attendances")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Training.Domain.Entities.Trainee", "Trainee")
                        .WithMany()
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Training.Domain.Entities.Course", b =>
                {
                    b.HasOne("Training.Domain.Entities.LKPCity", "LKPCity")
                        .WithMany("Course")
                        .HasForeignKey("CityId");

                    b.HasOne("Training.Domain.Entities.CourseStatus", "CourseStatus")
                        .WithMany()
                        .HasForeignKey("CourseStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Training.Domain.Entities.CourseTypes", "CourseTypes")
                        .WithMany()
                        .HasForeignKey("CourseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Training.Domain.Entities.LKPProTypeInfo", "LKPProTypeInfo")
                        .WithMany()
                        .HasForeignKey("Name");
                });

            modelBuilder.Entity("Training.Domain.Entities.CourseAttachment", b =>
                {
                    b.HasOne("Training.Domain.Entities.Course", "Course")
                        .WithOne("CourseAttachment")
                        .HasForeignKey("Training.Domain.Entities.CourseAttachment", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Training.Domain.Entities.CourseDates", b =>
                {
                    b.HasOne("Training.Domain.Entities.Course", "Course")
                        .WithMany("CourseDates")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Training.Domain.Entities.CourseExtraSetting", b =>
                {
                    b.HasOne("Training.Domain.Entities.Course", "Course")
                        .WithOne("CourseExtraSetting")
                        .HasForeignKey("Training.Domain.Entities.CourseExtraSetting", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Training.Domain.Entities.CourseTermAndConditions", b =>
                {
                    b.HasOne("Training.Domain.Entities.Course", "Course")
                        .WithOne("CourseTermAndConditions")
                        .HasForeignKey("Training.Domain.Entities.CourseTermAndConditions", "CourseId");
                });

            modelBuilder.Entity("Training.Domain.Entities.Exemptionletter", b =>
                {
                    b.HasOne("Training.Domain.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Training.Domain.Entities.Trainee", "Trainee")
                        .WithOne("Exemptionletter")
                        .HasForeignKey("Training.Domain.Entities.Exemptionletter", "TraineeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Training.Domain.Entities.FAQ", b =>
                {
                    b.HasOne("Training.Domain.Entities.Course", "Course")
                        .WithMany("FAQ")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Training.Domain.Entities.InActiveReason", b =>
                {
                    b.HasOne("Training.Domain.Entities.AspNetUsers", "User")
                        .WithMany("InActiveReason")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Training.Domain.Entities.MainRequsetWithRelatedRequest", b =>
                {
                    b.HasOne("Training.Domain.Entities.ApprovedCourses", "ApprovedCourse")
                        .WithMany("RelatedRequest")
                        .HasForeignKey("ApprovedCourseId");

                    b.HasOne("Training.Domain.Entities.RequestMaster", "MainRequest")
                        .WithMany()
                        .HasForeignKey("MainRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Training.Domain.Entities.RequestMaster", "RelatedRequest")
                        .WithMany()
                        .HasForeignKey("RelatedRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Training.Domain.Entities.Payment", b =>
                {
                    b.HasOne("Training.Domain.Entities.RequestMaster", "Request")
                        .WithMany("Payment")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Training.Domain.Entities.Product", b =>
                {
                    b.HasOne("Training.Domain.Entities.Category", "Categories")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Training.Domain.Entities.RequestDetails", b =>
                {
                    b.HasOne("Training.Domain.Entities.RequestMaster", "Request")
                        .WithOne("RequestDetails")
                        .HasForeignKey("Training.Domain.Entities.RequestDetails", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Training.Domain.Entities.Governmental", "Workplaces")
                        .WithMany()
                        .HasForeignKey("WorkPlaceId");
                });

            modelBuilder.Entity("Training.Domain.Entities.RequestMaster", b =>
                {
                    b.HasOne("Training.Domain.Entities.AspNetUsers", null)
                        .WithMany("UserCourseRequest")
                        .HasForeignKey("AspNetUsersId");

                    b.HasOne("Training.Domain.Entities.Course", "Course")
                        .WithMany("UserCourseRequest")
                        .HasForeignKey("CourseId");

                    b.HasOne("Training.Domain.Entities.LkpRequestStatus", "LkpRequestStatus")
                        .WithMany()
                        .HasForeignKey("RequestStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Training.Domain.Entities.LkpRequestStatus", "LkpRequestStatusForTrainee")
                        .WithMany()
                        .HasForeignKey("RequestStatusIdForTrainee");

                    b.HasOne("Training.Domain.Entities.LkpRequestType", "LkpRequestType")
                        .WithMany()
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Training.Domain.Entities.Trainee", "Trainee")
                        .WithMany("Requests")
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Training.Domain.Entities.RequestRecruitEmailsCounts", b =>
                {
                    b.HasOne("Training.Domain.Entities.Course", "Course")
                        .WithMany("RecruitCount")
                        .HasForeignKey("CourseId");

                    b.HasOne("Training.Domain.Entities.RequestRecruitEmailSetting", "Setting")
                        .WithMany()
                        .HasForeignKey("RelatedToSetting")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Training.Domain.Entities.RequestMaster", "Request")
                        .WithMany("RecruitCount")
                        .HasForeignKey("RequestId");
                });

            modelBuilder.Entity("Training.Domain.Entities.RequestTaskUsers", b =>
                {
                    b.HasOne("Training.Domain.Entities.AspNetUsers", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedToUserId");

                    b.HasOne("Training.Domain.Entities.RequestTasks", "RequestTask")
                        .WithMany("RequestTaskUsers")
                        .HasForeignKey("RequestTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Training.Domain.Entities.LkpRequestStatus", "TaskStatus")
                        .WithMany()
                        .HasForeignKey("TaskStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Training.Domain.Entities.RequestTasks", b =>
                {
                    b.HasOne("Training.Domain.Entities.AspNetRoles", "Role")
                        .WithMany()
                        .HasForeignKey("RelatedRoleId");

                    b.HasOne("Training.Domain.Entities.RequestMaster", "Request")
                        .WithMany("RequestTasks")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Training.Domain.Entities.LkpRequestStatus", "TaskStatus")
                        .WithMany()
                        .HasForeignKey("TaskStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Training.Domain.Entities.AspNetUsers", "User")
                        .WithMany()
                        .HasForeignKey("UserTakeAction");
                });

            modelBuilder.Entity("Training.Domain.Entities.Trainee", b =>
                {
                    b.HasOne("Training.Domain.Entities.Titles", "Titel")
                        .WithMany()
                        .HasForeignKey("TitleId");

                    b.HasOne("Training.Domain.Entities.AspNetUsers", "User")
                        .WithMany("Traniee")
                        .HasForeignKey("UserId");

                    b.HasOne("Training.Domain.Entities.Governmental", "Workplaces")
                        .WithMany("Trainees")
                        .HasForeignKey("WorkPlaceId");
                });

            modelBuilder.Entity("Training.Domain.Entities.TraineeProFormExtraData", b =>
                {
                    b.HasOne("Training.Domain.Entities.TranieeProCourseForm", "ProForm")
                        .WithOne("ProExtraSetting")
                        .HasForeignKey("Training.Domain.Entities.TraineeProFormExtraData", "proformid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Training.Domain.Entities.TranieeEnergyForm", b =>
                {
                    b.HasOne("Training.Domain.Entities.RequestMaster", "Request")
                        .WithOne("EnergyForm")
                        .HasForeignKey("Training.Domain.Entities.TranieeEnergyForm", "RequestId");
                });

            modelBuilder.Entity("Training.Domain.Entities.TranieeProCourseForm", b =>
                {
                    b.HasOne("Training.Domain.Entities.RequestMaster", "Request")
                        .WithOne("ProForm")
                        .HasForeignKey("Training.Domain.Entities.TranieeProCourseForm", "RequestId");
                });

            modelBuilder.Entity("Training.Domain.Entities.UserCourseRevisionTypes", b =>
                {
                    b.HasOne("Training.Domain.Entities.CourseTypes", "Types")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Training.Domain.Entities.AspNetUsers", "User")
                        .WithMany("UserCourseTypes")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Training.Domain.Entities.WaitingListPriority", b =>
                {
                    b.HasOne("Training.Domain.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Training.Domain.Entities.RequestMaster", "Request")
                        .WithMany("WaitingListPriority")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
